project_name= "moneyHero"
scheme = project_name
project_path = "./#{project_name}.xcodeproj"
cached_derived_data_path = File.expand_path("../cached_derived_data")
cache_folder = File.expand_path("#{cached_derived_data_path}/Build/Intermediates.noindex/ArchiveIntermediates/#{scheme}/BuildProductsPath/#{build_configuration}-iphoneos")
intermediates_path = "#{cached_derived_data_path}/Build/Intermediates.noindex/ArchiveIntermediates/#{project_name}"


default_platform(:ios)

platform :ios do
  before_all do
    keychain_password = '12345678'

    create_keychain(
      name: "ios-build.keychain",
      password: keychain_password,
      default_keychain: true,
      unlock: true,
      timeout: 3600
    )

    if ENV["BUILD_PODS"] == 'true'
      cocoapods(
        podfile: ENV["PODS_PATH"],
        use_bundle_exec: false
      )
    end
  end

  desc "Build"
  lane :build do
    api_key = app_store_connect_api_key(
      key_id: ENV['APPLE_KEY_ID'],
      issuer_id: ENV['APPLE_KEY_ISSUER_ID'],
      key_content: ENV['APPLE_KEY_CONTENT'],
      in_house: false # optional but may be required if using match/sigh
    )

    use_workspace = !ENV['WORKSPACE_PATH'].empty?
    match(type: ENV['MATCH_BUILD_TYPE'], api_key: api_key)

    if ENV['INCREMENT_BUILD_NUMBER'] == 'true'
      increment_build_number(
        xcodeproj: ENV['PROJECT_PATH'],
        build_number: (latest_testflight_build_number(
          app_identifier: ENV["IOS_APP_ID"],
          api_key: api_key,
          team_name: ENV["TEAM_NAME"],
        ) + 1).to_s,
      )
    end
    # puts "### check if cache exists "
    if(File.exist?(cache_folder))
      # - Loop over scripts in build phase `[CP] Copy Pods Resources`
      # - Prepend `BUILT_PRODUCTS_DIR=#{cache_folder}``
      fastlane_require 'xcodeproj'
      project = Xcodeproj::Project.open("../#{project_name}.xcodeproj")
      target = project.targets.select { |target| target.name == project_name }.first
      phase = target.shell_script_build_phases.select { |phase| phase.name && phase.name.include?('Copy Pods Resources') }.first
      if (!phase.shell_script.start_with?('BUILT_PRODUCTS_DIR'))
        phase.shell_script = "BUILT_PRODUCTS_DIR=#{cache_folder} #{phase.shell_script}"
        project.save()
      end

      puts "### build only .xcodeproj"
      gym(
        clean: false,
        project: "./#{project_name}.xcodeproj",
        scheme: ENV['SCHEME'],
        export_method: ENV['EXPORT_METHOD'],
        configuration: ENV['CONFIGURATION'],
        destination: 'generic/platform=iOS',
        export_options: {
          compileBitcode: false,
          uploadBitcode: false,
          uploadSymbols: false 
        },
        xcargs: [
            # Set paths where xcode can find pods binaries
            "PODS_CONFIGURATION_BUILD_DIR=#{cache_folder}",
            "FRAMEWORK_SEARCH_PATHS='#{cache_folder} $(inherited)'",
            "LIBRARY_SEARCH_PATHS='#{cache_folder} $(inherited)'",
            "SWIFT_INCLUDE_PATHS=#{cache_folder}"
        ].join(" ")
      )
    else
      puts "### build full app .xcworkspace"
      gym(
        scheme: ENV['SCHEME'],
        workspace: "./#{project_name}.xcworkspace",
        export_method: ENV['EXPORT_METHOD'],
        derived_data_path: cached_derived_data_path,
        configuration: ENV['CONFIGURATION'],
        clean: true,
      )

      puts "### reduce cache size by removing unnecessary files"
      require 'fileutils';
      dirs = [
        File.expand_path("#{cached_derived_data_path}/info.plist"),
        File.expand_path("#{cached_derived_data_path}/Logs"),
        File.expand_path("#{cached_derived_data_path}/SourcePackages"),
        File.expand_path("#{cached_derived_data_path}/ModuleCache.noindex"),
        File.expand_path("#{intermediates_path}/IntermediateBuildFilesPath/#{project_name}.build"),
        File.expand_path("#{intermediates_path}/IntermediateBuildFilesPath/XCBuildData"),
        File.expand_path("#{intermediates_path}/BuildProductsPath/SwiftSupport"),
        File.expand_path("#{intermediates_path}/PrecompiledHeaders")
      ]
      dirs.each { |dir| FileUtils.rm_rf(dir) }
    end




    if ENV["BROWSERSTACK_UPLOAD"] == 'true'
      upload_to_browserstack_app_live(
        browserstack_username: ENV["BROWSERSTACK_USERNAME"],
        browserstack_access_key: ENV["BROWSERSTACK_ACCESS_KEY"],
        file_path: ENV["OUTPUT_PATH"]
      )
    end

    if ENV["TESTFLIGHT_UPLOAD"] == 'true'
      upload_to_testflight(
        ipa: File.join(File.dirname(ENV['OUTPUT_PATH']), File.basename(ENV['OUTPUT_PATH'])),
        api_key: api_key,
        app_identifier: ENV['IOS_APP_ID'],
        team_name: ENV['TEAM_NAME'],
        skip_waiting_for_build_processing: true,
        skip_submission: true,
      )
    end
  end

  after_all do
    delete_keychain(
      name: "ios-build.keychain"
    )
  end
end





# project_name= "moneyHero"
# scheme = project_name
# build_configuration = "Release"
# project_path = "./#{project_name}.xcodeproj"
# export_method = "app-store"
# cached_derived_data_path = File.expand_path("../cached_derived_data")
# cache_folder = File.expand_path("#{cached_derived_data_path}/Build/Intermediates.noindex/ArchiveIntermediates/#{scheme}/BuildProductsPath/#{build_configuration}-iphoneos")
# intermediates_path = "#{cached_derived_data_path}/Build/Intermediates.noindex/ArchiveIntermediates/#{project_name}"

# default_platform(:ios)

# platform :ios do
#   desc "Build iOS"
#   lane :build do
#     # build_app(
#     #   workspace: "#{project_name}.xcworkspace",
#     #   scheme: project_name,
#     #   export_xcargs: "-allowProvisioningUpdates"
#     # )
#   end

#   desc "Build iOS with pods caching"
#     lane :cached_build do

#       puts "### check if cache exists "
#       if(File.exist?(cache_folder))
#         # - Loop over scripts in build phase `[CP] Copy Pods Resources`
#         # - Prepend `BUILT_PRODUCTS_DIR=#{cache_folder}``
#         fastlane_require 'xcodeproj'
#         project = Xcodeproj::Project.open("../#{project_name}.xcodeproj")
#         target = project.targets.select { |target| target.name == project_name }.first
#         phase = target.shell_script_build_phases.select { |phase| phase.name && phase.name.include?('Copy Pods Resources') }.first
#         if (!phase.shell_script.start_with?('BUILT_PRODUCTS_DIR'))
#           phase.shell_script = "BUILT_PRODUCTS_DIR=#{cache_folder} #{phase.shell_script}"
#           project.save()
#         end

#         puts "### build only .xcodeproj"
#         gym(
#           clean: false,
#           project: "./#{project_name}.xcodeproj",
#           scheme: scheme,
#           export_method: export_method,
#           configuration: build_configuration,
#           destination: 'generic/platform=iOS',
#           export_options: {
#             compileBitcode: false,
#             uploadBitcode: false,
#             uploadSymbols: false 
#           },
#           xcargs: [
#               # Set paths where xcode can find pods binaries
#               "PODS_CONFIGURATION_BUILD_DIR=#{cache_folder}",
#               "FRAMEWORK_SEARCH_PATHS='#{cache_folder} $(inherited)'",
#               "LIBRARY_SEARCH_PATHS='#{cache_folder} $(inherited)'",
#               "SWIFT_INCLUDE_PATHS=#{cache_folder}"
#           ].join(" ")
#         )
#       else
#         puts "### build full app .xcworkspace"
#         gym(
#           scheme: scheme,
#           workspace: "./#{project_name}.xcworkspace",
#           export_method: export_method,
#           derived_data_path: cached_derived_data_path,
#           configuration: build_configuration,
#           clean: true,
#         )

#         puts "### reduce cache size by removing unnecessary files"
#         require 'fileutils';
#         dirs = [
#           File.expand_path("#{cached_derived_data_path}/info.plist"),
#           File.expand_path("#{cached_derived_data_path}/Logs"),
#           File.expand_path("#{cached_derived_data_path}/SourcePackages"),
#           File.expand_path("#{cached_derived_data_path}/ModuleCache.noindex"),
#           File.expand_path("#{intermediates_path}/IntermediateBuildFilesPath/#{project_name}.build"),
#           File.expand_path("#{intermediates_path}/IntermediateBuildFilesPath/XCBuildData"),
#           File.expand_path("#{intermediates_path}/BuildProductsPath/SwiftSupport"),
#           File.expand_path("#{intermediates_path}/PrecompiledHeaders")
#         ]
#         dirs.each { |dir| FileUtils.rm_rf(dir) }
#       end
#     end
# end
